// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  /* provider = "sqlite"
  url      = env("DATABASE_URL") */
   provider  = "postgresql"
  url       = env("DATABASE_URL")
 // directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isAdmin   Boolean @default(false)
  email     String  @unique
  password  String
  firstName String
  lastName  String
  cart      Cart?
  orders     Order[]
}

enum Category {
  ELECTRONICS
  CLOTHING
  BOOKS
  HOME_GOODS
  OTHER
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String     @unique
  description String
  image String @default("")
  price       Float
  quantity    Int @default(1)
  category    Category   @default(OTHER)
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@unique([cartId, productId])
}

model Order{
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  total Float @default(0.0)
  userId    String     
  user      User       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}